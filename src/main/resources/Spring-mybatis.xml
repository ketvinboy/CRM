<beans xmlns="http://www.springframework.org/schema/beans"  
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
     xmlns:aop="http://www.springframework.org/schema/aop"  
     xmlns:tx="http://www.springframework.org/schema/tx"  
     xmlns:context="http://www.springframework.org/schema/context"  
     xsi:schemaLocation="  
         http://www.springframework.org/schema/beans  
         http://www.springframework.org/schema/beans/spring-beans.xsd  
         http://www.springframework.org/schema/tx  
         http://www.springframework.org/schema/tx/spring-tx.xsd  
         http://www.springframework.org/schema/aop  
         http://www.springframework.org/schema/aop/spring-aop.xsd  
         http://www.springframework.org/schema/context  
         http://www.springframework.org/schema/context/spring-context.xsd">  
         
         <context:property-placeholder location="classpath:db.properties"/>
         <context:component-scan base-package="com.sunshine.Dao,com.sunshine.Service,com.sunshine.Utils"></context:component-scan>
         <!-- 配置数据源 -->
         <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
         	<property name="user" value="${jdbc.user}"></property>
         	<property name="password" value="${jdbc.password}"></property>
         	<property name="jdbcUrl" value="${jdbc.url}"></property>
         	<property name="driverClass" value="${jdbc.driver}"></property>
         	<property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
         	<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
         	<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
         	<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
         </bean>
          <!-- 配置ActiveMQ消息中间件(开始) -->
          <!-- 配置ActiveMQ提供的目标工厂 -->
          <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
          		<property name="brokerURL" value="tcp://111.230.98.227:61616"></property>
          </bean>
          <!-- 配置Spring-jms提供的连接工厂 -->
          <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
          		<property name="targetConnectionFactory" ref="targetConnectionFactory"></property>
          </bean>
         <!-- 配置目的的（采用主题模式） -->  
         <bean id="activeMQTopic" class="org.apache.activemq.command.ActiveMQTopic">
         	<constructor-arg value="emailtop"></constructor-arg>
         </bean>
         <!-- 配置Spring-jms提供的JmsTemplate,用来发送消息 -->
         <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
         	<property name="connectionFactory" ref="connectionFactory"></property>
         </bean>
		 <!-- 配置消息监听器，用来监听消息中间件发出的消息 -->
		 <bean id="emailSendServer" class="com.sunshine.Utils.EmailSendServer"></bean>
		 <!-- 配置消息容器 -->
		 <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		 		<property name="destination" ref="activeMQTopic"></property>
		 		<property name="messageListener" ref="emailSendServer"></property>
		 		<property name="connectionFactory" ref="connectionFactory"></property>
		 </bean>
         <!-- 配置ActiveMQ消息中间件(结束) -->
         <!-- 配置邮件服务器（开始） -->
         <!-- 简单的消息对象创建 -->
         <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
         	<property name="from" value="${mail.from}"></property>
         </bean>
         <!-- 配置邮件发送器 -->
         <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
         	<property name="host" value="${mail.host}"></property>
         	<property name="username" value="${mail.username}"></property>
         	<property name="password" value="${mail.password}"></property>
         	<property name="defaultEncoding" value="UTF-8"></property>
         	<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
                 <prop key="mail.debug">true</prop>
                 <prop key="mail.smtp.timeout">0</prop>
			</props>
		</property>
         </bean>
         <!-- 配置邮件服务器（结束） --> 
         <!-- 配置mybatis文件 -->
         <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         	<property name="dataSource" ref="dataSource"></property>
         <!--配置数据库库所对应的java实体类,进行映射 -->
         	<property name="typeAliasesPackage" value="com.sunshine.Model"></property>
         	<!-- 配置mybatis的pageHelper自动分页功能插件，在mybatis的配置文件当中进行配置 -->
         	<property name="configLocation" value="classpath:mybatis-config.xml"></property> 
         <!-- 	配置自动扫描entity目录，省掉在configure.xml的配置 -->
         	<property name="mapperLocations" value="classpath:com/sunshine/Mapper/*.xml"></property>
         </bean>
         <!-- 配置mybatis自动扫描识别Mapper的接口文件 -->
         <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         	<property name="basePackage" value="com.sunshine.Dao"></property>
         	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
         </bean>
         <!-- 配置定时器调度工厂 （开始）-->
         <bean id="" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
         	<property name="dataSource" ref="dataSource"></property><!-- 配置数据源持久化 -->
         	<property name="quartzProperties"><!-- 设置quartz属性 -->
         		<props>
         				<!-- 线程池配置 -->
						<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
						<prop key="org.quartz.threadPool.threadCount">20</prop><!-- 初始化线程数为20 -->
						<prop key="org.quartz.threadPool.threadPriority">5</prop><!-- 设置作业的优先级 -->
						<prop key="org.quartz.jobStore.misfireThreshold">60000</prop><!-- 初始化线程数为20 -->
						
						<!-- JobStore配置，通过数据库存储最终调度程序的配置 -->
						<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
						<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
						
						<!-- 数据库表名的前缀设置 -->
						<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
         		</props>
         	</property>
         	<!--设置应用初始化之后，延迟30秒再启动scheduler -->
         	<property name="startupDelay" value="30"></property>
         	<property name="applicationContextSchedulerContextKey" value="applicationContext"></property>
         	<!-- 设置应用程序随web启动 -->
         	<property name="autoStartup" value="true"></property>
         	<property name="triggers">
         		<ref bean="cronTriggerFactory"/>
         	</property>  <!-- 设置触发器属性 -->
         </bean>
         <!-- 配置定时器调度工厂 （结束）-->
         <!-- 定时任务开始 -->
         <bean id="jobDetailFactory" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
         	 <property name="jobClass" value="com.sunshine.Utils.BespokeUpdateJob"></property>        <!-- 调度作业类（要执行的调度任务） -->
         	 <property name="name" value="job1"></property>        <!-- 调度作业的名称 -->
         	 <property name="group" value="group1"></property>     <!-- 调度作业组的名称 -->
         	 <property name="durability" value="true"></property>	<!-- 设置是否持久化 -->
         	 <property name="requestsRecovery" value="true"></property><!-- 设置中断后可恢复 -->
         </bean>
 
        <!-- 具体触发器类 -->
        <bean id="cronTriggerFactory" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        	<property name="name" value="trigger1"></property>                <!-- 触发器名称 -->
        	<property name="group" value="triggergroup1"></property>          <!-- 触发器组名称 -->
        	<property name="cronExpression" value="0 0/5 * * * ?"></property>   <!-- 触发器时间表达式 -->
        	<property name="jobDetail" ref="jobDetailFactory"></property>     <!-- 具体的作业调度 -->
        	<property name="timeZone" ref="timeZone"></property>                            <!-- 定义时区 -->
        	<property name="misfireInstruction" value="1"></property>         <!-- 选填项：在此处定义市区 -->
        </bean>
         <!-- 定时时区 -->
         <bean id="timeZone" class="java.util.TimeZone" factory-method="getTimeZone">
         	<constructor-arg value="GMT+08:00"></constructor-arg>
         </bean>
         <!-- 自定义Relem -->
         <bean id="myRealm" class="com.sunshine.Utils.MyShiroReleam"></bean>
         
         <!-- 配置安全管理器 -->
         <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
         	<property name="realm" ref="myRealm"></property>
         </bean>
         <!-- 配置shiro过滤器 -->
         <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
         	<!-- shiro的核心安全接口，这个属性是必须的 -->
         	<property name="securityManager" ref="securityManager"></property>
         	<!-- 身份认证失败，则跳转到登陆页面 -->
         	<property name="loginUrl" value="/home/login_index"></property>
         	<!-- 权限认证失败，则跳转到指定的页面 -->
         	<property name="unauthorizedUrl" value="/home/login_index"></property>
            <!--Shiro连接约束配置，即过滤连的定义 -->
         	<property name="filterChainDefinitions">
         		<value>
         			/home/main_index=authc
         			/**=anon
         		</value>
         	</property>
         </bean>
         <!-- 保证实现了Shiro内部的lifeCycle函数的bean执行 -->
         <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
         <!-- 开启shiro注解 -->
         <bean  class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
         <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
         	 <property name="securityManager" ref="securityManager"></property>
         </bean> 
         <!-- 配置事务管理器 -->
         <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         	<property name="dataSource" ref="dataSource"></property>
         </bean>
         <tx:advice id="txadvice">
         	<tx:attributes>
         		<tx:method name="get**" read-only="true" isolation="DEFAULT" propagation="REQUIRED"/>
         		<tx:method name="find**" read-only="true"/>
         		<tx:method name="*"/>
         	</tx:attributes>
         </tx:advice>
         <aop:config>
         	<aop:pointcut expression="execution(* com.sunshine.Service.Impl.*.*(..))" id="bizmethod"/>
         	<aop:advisor advice-ref="txadvice" pointcut-ref="bizmethod"/>
         </aop:config>
</beans>